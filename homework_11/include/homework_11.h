#ifndef HOMEWORK_11_H
#define HOMEWORK_11_H
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//Напишете програма, която калкулира разликата на
//два времеви периода, изразени във векове, години, месеци, дни,
//минути, секудни. Принтирайте изходните периоди и резултата
void Zadacha_1(void);
//Направете структура struct rect, която съдържа в
//себе си две точки. Създайте обект от тип тази структура наречен
//screen. Използвайте функцията makepoint за да зададете начална точка
//на екрана (0, 0) и крайна точка (15, 15). Запълнете пространството
//между тях с тирета
void Zadacha_2(void);
//Представете служителите
//във фирма в структура с членове: пореден номер, име, презиме,
//фамилия, позиция, трудов стаж в години, заплата в лева, указател към
//структурата, описващ неговия началник. Напишете програма, която
//въвежда 10 служителя, които се съхраняват в масив от описаните
//структури. Въвеждането на служителите може да стане на два паса,
//първо въвеждане на всички данни без указателя към началника и на
//втори пас, указване на всеки служител кой е неговият началник
void Zadacha_3(void);
//Дефинирайте тип указател към функция, която изпълнява определена
//операция върху две целочислени променливи. Дефинирайте функции, които
//изпълняват операциите +, -, *, /. Използвайте новия тип, за да извикате всяка една
//от функциите
void Zadacha_4(void);
//Напишете масив от структури наречен key_tab[ ], като използвате тази,
//дефинирана в горното упражнение - потребителски тип key_t, която
//съдържа символен низ и число. Инициализирайте масива с всички
//ключови думи на С, като заделяте паметта за всяка ключова дума
//динамично. Принтирайте масива
void Zadacha_5(void);
//Напишете собствен тип за структура node, съдържаща
//един член от тип int и един указател към тип самата структура. Заделете
//динамично памет за масив от 10 елемента от тази структура с malloc. За
//всеки елемент от масива попълнете цялото число с неговия пореден номер.
//Принтирайте резултатите
void Zadacha_6(void);
//Създайте структура диня с два елемента - диаметър и дебелина на кората заделете
//динамично с malloc() за масив от А на брой дини от сорт мелон и попълнете данните
//за диаметър между 15 и 140 см с функцията rand(), за всяка една диня в масива и
//дебелина на кората между 0.5 и 3.5 см. Създайте структура диня с два елемента -
//диаметър и дебелина на кората заделете динамично с malloc() за масив от В на брой
//дини от сорт пъмпкин и попълнете данните за диаметър между 35 и 95 см с
//функцията rand(), за всяка една диня в масива и дебелина на кората между 0.3 и 0.9
//см. Намерете средната големина на динята и средната дебелина на кората и ги
//съпоставете с тези от втория масив. Изведете на екрана купчината от кой сорт е по
//добре да се купи.
//Изход: По-добре е да се купят ... дини с диаметър ... сантиметра и кора с дебелина D
//см вместо ... дини с диаметър ... см и дебелина на кората D1 см
void Zadacha_7(void);
//Създайте структура
//fraction (аритметична дроб) с член данни int n(nominator=числител)
//и int d (denominator=знаменател)
//С помощта на typedef struct създайте нов тип FRACTION
//и указател към него *FPTR
//Дефинирайте функциите
//FRACTION create(int numerator, int denominator);-създаване на дроб по дадени
//стойности на числител и знаменател
//FRACTION input(void);-създаване на дроб по стойности въведени от клавиатурата
//void print(FPTR); - отпечатване на дроб
//int gcd(int first_dividend, int second_dividend); - НОД
//FRACTION add(FPTR, FPTR); -събиране на две дроби
//FRACTION mult(FPTR, FPTR);-умножение на две дроби
//FRACTION divide(FPTR, FPTR);-деление на две дроби
//FRACTION subtract(FPTR, FPTR);-изваждане на две дроби
void Zadacha_8(void);
void WelcomeFunction(void);

#endif