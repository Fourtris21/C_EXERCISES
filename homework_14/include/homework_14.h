#ifndef HOMEWORK_14_H
#define HOMEWORK_14_H
//Да се състави програма, чрез която се въвеждат N броя
//естествени числа от интервала [1..101].
//Броят на въведените числа не се знае предварително - определя се от
//потребителя.
//Чрез използване на структура от тип опашка да се изведе въведената редица
//естествени числа като:
//а) първо се извеждат всички нечетни числа;
//б) след тях се извеждат всички четни числа;
//в) извеждането на числата съответства на реда на въвеждането им.
//Пример: 11, 12, 15, 17, 19, 21, 23, 9, 10, 16, 18, 20
//Изход: 11, 15, 17, 19, 21, 23, 9, 12, 10, 16, 18, 20
void Zadacha_1(void);
//Напишете следните функции:
//● Функция, която проверявя дали едно число е просто
//● Функция, която връща най-големия общ делител на две числа
//● Функция, която използва горната функция и по даден като параметър
//масив от цели числа, връща НОД на елементите от масива
void Zadacha_2(void);
//Напишете функция, която връща двумерен масив, запълнен по
//следния начин
void Zadacha_3(void);
//Напишете функция, която по зададено n връща двумерен масив n x n,
//елементите на който са подредени като спирала:
void Zadacha_4(void);
//Напишете функция, която по даден е масив от цели числа изчислява
//процента на неговите елементи, които са положителни, които са отрицателни и
//които са нула. Резултатът, който връща функцията да бъде масив от числа между 0
//и 1, даващи пропорцията на всеки вид числа.
//● Програмата чете масива от числа, извиква горната функция и отпечатва като резултат
//процентите всеки на нов ред с 6 цифри след десетичната запетая
void Zadacha_5(void);
//Даден e масив от 5 положителни числа. Да се напишат две функции, които
//намират минималната и максималната стойност, които могат да се
//изчислят, като се сумират точно 4 от тези 5 числа.
//● Програмата чете масива от тези 5 числа, извиква съответните функции и
//отпечатва съответно minimum и maximum стойностите, всяка на нов ред
void Zadacha_6(void);
void Zadacha_7(void);
void Zadacha_8(void);
//Една крайна редица от цели числа се нарича зигзаг, ако всеки елемент на редицата (без
//първия и последния) е или по-голям от двата му съседа или по-малък от двата съседни
//елемента. Да се напише функция, която по зададен масив от цели числа, определя дали
//редицата, образувана от тези числа е зигзаг.
//Вход. На стандартния вход се задават числови редици – всяка на отделен ред с разделител
//един интервал между числата.
//Ограничения. Всички числа се представят в типа int
//Изход. За всяка редица се извежда на отделен ред yes за зигзаг и no – за редица, която не е
//зигзаг
void Zadacha_9(void);
//Да се напише програма, която проверява дали дадена кредитна карта от определен тип— VISA или
//MasterCard, има валиден номер. За валидиране на номера на кредитните карти, да се използва следното
//описание:
//● Номерата на кредитните карти са 16-цифрени в групи по четири.
//● Например, да проверим дали следната кредитна карта е валидна:
//● 4 2 0 4 – 5 8 7 6 – 9 0 1 2 – 5 2 3 4
//● 1) Обръщаме цифрите на номера и получаваме:
//● 4 3 2 5 2 1 0 9 6 7 8 5 4 0 2 4
//● 2) Удвояваме цифрите, стоящи на четна позиция, и получаваме:
//● 4 6 2 10 2 2 0 18 6 14 8 10 4 0 2 8
//● 3) Ако получим събираеми, по-големи от 9, ги разделяме на две отделни цифри. Събираме
//● така получените цифри:
//● 4 + 6 + 2 + 1 + 0 + 2 + 2 + 0 + 1 + 8 + 6 + 1 + 4 + 8 + 1 + 0 + 4 + 0 + 2 + 8 = 60
//● 4) Ако сборът се дели на 10 без остатък, то кредитната карта е валидна. Ако номерът започва
//● с 4, то типът ѝ е VISA, а ако има префикс 51–55, тя е MasterCard
void Zadacha_10(void);

void WelcomeFunction(void);

#endif